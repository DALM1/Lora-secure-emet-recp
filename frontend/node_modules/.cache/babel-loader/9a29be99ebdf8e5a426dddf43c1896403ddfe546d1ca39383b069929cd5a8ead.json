{"ast":null,"code":"import axios from 'axios';\n\n// Configuration de base pour axios\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Intercepteur pour les réponses d'erreur\napi.interceptors.response.use(response => response, error => {\n  console.error('Erreur API:', error);\n  if (error.response) {\n    var _error$response$data, _error$response$data2;\n    // Le serveur a répondu avec un code d'erreur\n    const message = ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || ((_error$response$data2 = error.response.data) === null || _error$response$data2 === void 0 ? void 0 : _error$response$data2.message) || 'Erreur serveur';\n    throw new Error(message);\n  } else if (error.request) {\n    // La requête a été faite mais pas de réponse\n    throw new Error('Impossible de contacter le serveur');\n  } else {\n    // Erreur dans la configuration de la requête\n    throw new Error('Erreur de configuration de la requête');\n  }\n});\nexport class ApiService {\n  // ===== SANTÉ DU SYSTÈME =====\n\n  /**\n   * Vérifier l'état de santé du serveur\n   */\n  static async getHealth() {\n    const response = await api.get('/api/health');\n    return response.data;\n  }\n\n  /**\n   * Obtenir la liste des ports série disponibles\n   */\n  static async getAvailablePorts() {\n    const response = await api.get('/api/ports');\n    return response.data;\n  }\n\n  // ===== CONNEXION LORA =====\n\n  /**\n   * Connecter les modules LoRa\n   */\n  static async connectLoRa(senderPort, receiverPort, baudrate = 115200) {\n    const response = await api.post('/api/lora/connect', {\n      sender_port: senderPort,\n      receiver_port: receiverPort,\n      baudrate: baudrate\n    });\n    return response.data;\n  }\n\n  /**\n   * Déconnecter les modules LoRa\n   */\n  static async disconnectLoRa() {\n    const response = await api.post('/api/lora/disconnect');\n    return response.data;\n  }\n\n  /**\n   * Obtenir les informations de signal LoRa\n   */\n  static async getSignalInfo() {\n    const response = await api.get('/api/lora/signal');\n    return response.data;\n  }\n\n  // ===== CRYPTOGRAPHIE =====\n\n  /**\n   * Initialiser le système de chiffrement avec un mot de passe\n   */\n  static async initCrypto(password) {\n    const response = await api.post('/api/crypto/init', {\n      password: password\n    });\n    return response.data;\n  }\n\n  /**\n   * Exporter la clé de chiffrement\n   */\n  static async exportCryptoKey() {\n    const response = await api.get('/api/crypto/export');\n    return response.data;\n  }\n\n  /**\n   * Importer une clé de chiffrement\n   */\n  static async importCryptoKey(keyB64) {\n    const response = await api.post('/api/crypto/import', {\n      key_b64: keyB64\n    });\n    return response.data;\n  }\n\n  /**\n   * Obtenir l'empreinte de la clé actuelle\n   */\n  static async getCryptoFingerprint() {\n    const response = await api.get('/api/crypto/fingerprint');\n    return response.data;\n  }\n\n  // ===== MESSAGES =====\n\n  /**\n   * Envoyer un message chiffré\n   */\n  static async sendMessage(message, priority = 'normal') {\n    const response = await api.post('/api/messages/send', {\n      message: message,\n      priority: priority\n    });\n    return response.data;\n  }\n\n  /**\n   * Obtenir l'historique des messages\n   */\n  static async getMessageHistory(limit = 100) {\n    const response = await api.get('/api/messages/history', {\n      params: {\n        limit\n      }\n    });\n    return response.data;\n  }\n\n  /**\n   * Effacer l'historique des messages\n   */\n  static async clearMessageHistory() {\n    const response = await api.delete('/api/messages/history');\n    return response.data;\n  }\n\n  /**\n   * Obtenir les statistiques des messages\n   */\n  static async getMessageStats() {\n    const response = await api.get('/api/messages/stats');\n    return response.data;\n  }\n\n  // ===== UTILITAIRES =====\n\n  /**\n   * Tester la connexion API\n   */\n  static async testConnection() {\n    try {\n      const response = await api.get('/api/health');\n      return {\n        success: true,\n        data: response.data,\n        latency: response.headers['x-response-time'] || 'N/A'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  /**\n   * Obtenir les informations système\n   */\n  static async getSystemInfo() {\n    const response = await api.get('/api/system/info');\n    return response.data;\n  }\n\n  /**\n   * Redémarrer le système\n   */\n  static async restartSystem() {\n    const response = await api.post('/api/system/restart');\n    return response.data;\n  }\n}\n\n// Fonctions utilitaires pour la gestion des erreurs\nexport const handleApiError = (error, defaultMessage = 'Une erreur est survenue') => {\n  if (error.response) {\n    var _error$response$data3, _error$response$data4;\n    return ((_error$response$data3 = error.response.data) === null || _error$response$data3 === void 0 ? void 0 : _error$response$data3.error) || ((_error$response$data4 = error.response.data) === null || _error$response$data4 === void 0 ? void 0 : _error$response$data4.message) || defaultMessage;\n  } else if (error.request) {\n    return 'Impossible de contacter le serveur';\n  } else {\n    return error.message || defaultMessage;\n  }\n};\n\n// Fonction pour formater les réponses API\nexport const formatApiResponse = response => {\n  return {\n    success: response.success || true,\n    data: response.data || response,\n    message: response.message || 'Opération réussie',\n    timestamp: new Date().toISOString()\n  };\n};\n\n// Configuration pour les WebSockets\nexport const WEBSOCKET_CONFIG = {\n  url: API_BASE_URL,\n  options: {\n    transports: ['websocket', 'polling'],\n    timeout: 5000,\n    reconnection: true,\n    reconnectionDelay: 1000,\n    reconnectionAttempts: 5,\n    maxReconnectionAttempts: 10\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","interceptors","response","use","error","console","_error$response$data","_error$response$data2","message","data","Error","request","ApiService","getHealth","get","getAvailablePorts","connectLoRa","senderPort","receiverPort","baudrate","post","sender_port","receiver_port","disconnectLoRa","getSignalInfo","initCrypto","password","exportCryptoKey","importCryptoKey","keyB64","key_b64","getCryptoFingerprint","sendMessage","priority","getMessageHistory","limit","params","clearMessageHistory","delete","getMessageStats","testConnection","success","latency","getSystemInfo","restartSystem","handleApiError","defaultMessage","_error$response$data3","_error$response$data4","formatApiResponse","timestamp","Date","toISOString","WEBSOCKET_CONFIG","url","options","transports","reconnection","reconnectionDelay","reconnectionAttempts","maxReconnectionAttempts"],"sources":["/Users/dalm1/Downloads/lora-receiver/lora-secure-comm/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Configuration de base pour axios\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Intercepteur pour les réponses d'erreur\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    console.error('Erreur API:', error);\n    \n    if (error.response) {\n      // Le serveur a répondu avec un code d'erreur\n      const message = error.response.data?.error || error.response.data?.message || 'Erreur serveur';\n      throw new Error(message);\n    } else if (error.request) {\n      // La requête a été faite mais pas de réponse\n      throw new Error('Impossible de contacter le serveur');\n    } else {\n      // Erreur dans la configuration de la requête\n      throw new Error('Erreur de configuration de la requête');\n    }\n  }\n);\n\nexport class ApiService {\n  // ===== SANTÉ DU SYSTÈME =====\n  \n  /**\n   * Vérifier l'état de santé du serveur\n   */\n  static async getHealth() {\n    const response = await api.get('/api/health');\n    return response.data;\n  }\n\n  /**\n   * Obtenir la liste des ports série disponibles\n   */\n  static async getAvailablePorts() {\n    const response = await api.get('/api/ports');\n    return response.data;\n  }\n\n  // ===== CONNEXION LORA =====\n  \n  /**\n   * Connecter les modules LoRa\n   */\n  static async connectLoRa(senderPort, receiverPort, baudrate = 115200) {\n    const response = await api.post('/api/lora/connect', {\n      sender_port: senderPort,\n      receiver_port: receiverPort,\n      baudrate: baudrate\n    });\n    return response.data;\n  }\n\n  /**\n   * Déconnecter les modules LoRa\n   */\n  static async disconnectLoRa() {\n    const response = await api.post('/api/lora/disconnect');\n    return response.data;\n  }\n\n  /**\n   * Obtenir les informations de signal LoRa\n   */\n  static async getSignalInfo() {\n    const response = await api.get('/api/lora/signal');\n    return response.data;\n  }\n\n  // ===== CRYPTOGRAPHIE =====\n  \n  /**\n   * Initialiser le système de chiffrement avec un mot de passe\n   */\n  static async initCrypto(password) {\n    const response = await api.post('/api/crypto/init', {\n      password: password\n    });\n    return response.data;\n  }\n\n  /**\n   * Exporter la clé de chiffrement\n   */\n  static async exportCryptoKey() {\n    const response = await api.get('/api/crypto/export');\n    return response.data;\n  }\n\n  /**\n   * Importer une clé de chiffrement\n   */\n  static async importCryptoKey(keyB64) {\n    const response = await api.post('/api/crypto/import', {\n      key_b64: keyB64\n    });\n    return response.data;\n  }\n\n  /**\n   * Obtenir l'empreinte de la clé actuelle\n   */\n  static async getCryptoFingerprint() {\n    const response = await api.get('/api/crypto/fingerprint');\n    return response.data;\n  }\n\n  // ===== MESSAGES =====\n  \n  /**\n   * Envoyer un message chiffré\n   */\n  static async sendMessage(message, priority = 'normal') {\n    const response = await api.post('/api/messages/send', {\n      message: message,\n      priority: priority\n    });\n    return response.data;\n  }\n\n  /**\n   * Obtenir l'historique des messages\n   */\n  static async getMessageHistory(limit = 100) {\n    const response = await api.get('/api/messages/history', {\n      params: { limit }\n    });\n    return response.data;\n  }\n\n  /**\n   * Effacer l'historique des messages\n   */\n  static async clearMessageHistory() {\n    const response = await api.delete('/api/messages/history');\n    return response.data;\n  }\n\n  /**\n   * Obtenir les statistiques des messages\n   */\n  static async getMessageStats() {\n    const response = await api.get('/api/messages/stats');\n    return response.data;\n  }\n\n  // ===== UTILITAIRES =====\n  \n  /**\n   * Tester la connexion API\n   */\n  static async testConnection() {\n    try {\n      const response = await api.get('/api/health');\n      return {\n        success: true,\n        data: response.data,\n        latency: response.headers['x-response-time'] || 'N/A'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  /**\n   * Obtenir les informations système\n   */\n  static async getSystemInfo() {\n    const response = await api.get('/api/system/info');\n    return response.data;\n  }\n\n  /**\n   * Redémarrer le système\n   */\n  static async restartSystem() {\n    const response = await api.post('/api/system/restart');\n    return response.data;\n  }\n}\n\n// Fonctions utilitaires pour la gestion des erreurs\nexport const handleApiError = (error, defaultMessage = 'Une erreur est survenue') => {\n  if (error.response) {\n    return error.response.data?.error || error.response.data?.message || defaultMessage;\n  } else if (error.request) {\n    return 'Impossible de contacter le serveur';\n  } else {\n    return error.message || defaultMessage;\n  }\n};\n\n// Fonction pour formater les réponses API\nexport const formatApiResponse = (response) => {\n  return {\n    success: response.success || true,\n    data: response.data || response,\n    message: response.message || 'Opération réussie',\n    timestamp: new Date().toISOString()\n  };\n};\n\n// Configuration pour les WebSockets\nexport const WEBSOCKET_CONFIG = {\n  url: API_BASE_URL,\n  options: {\n    transports: ['websocket', 'polling'],\n    timeout: 5000,\n    reconnection: true,\n    reconnectionDelay: 1000,\n    reconnectionAttempts: 5,\n    maxReconnectionAttempts: 10\n  }\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}