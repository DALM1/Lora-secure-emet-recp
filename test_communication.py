#!/usr/bin/env python3
"""
Script de test pour la communication LoRa chiffr√©e
Ce script teste la communication entre les modules LoRa avec chiffrement AES
"""

import sys
import os
import time
import threading
from datetime import datetime

# Ajouter le dossier shared au path
sys.path.append(os.path.join(os.path.dirname(__file__), 'shared'))

from lora_module import LoRaDevice, list_available_ports
from crypto_utils import SecureCrypto, test_crypto

def test_lora_communication():
    """
    Test complet de la communication LoRa chiffr√©e
    """
    print("‚ö™Ô∏è Test de Communication LoRa Chiffr√©e")
    print("=" * 50)

    # 1. Lister les ports disponibles
    print("\nüì° Ports s√©rie disponibles")
    ports = list_available_ports()
    for i, port in enumerate(ports):
        if isinstance(port, dict):
            print(f"  {i+1}. {port['name']} ({port['port']}) - {port['hwid']}")
        else:
            print(f"  {i+1}. {port}")

    if len(ports) < 2:
        print("‚ö´Ô∏è Erreur: Au moins 2 ports s√©rie sont n√©cessaires pour le test")
        return False

    # 2. Test du syst√®me de chiffrement
    print("\n‚ö™Ô∏è Test du syst√®me de chiffrement")
    try:
        test_crypto()
    except Exception as e:
        print(f"‚ö´Ô∏è Erreur de chiffrement: {str(e)}")
        import traceback
        traceback.print_exc()
        return False
    print("‚ö™Ô∏è Syst√®me de chiffrement OK")

    # 3. Initialisation du chiffrement
    print("\nüîë Initialisation du chiffrement...")
    crypto = SecureCrypto(password="lora_secure_2024")
    print(f"Empreinte de cl√©: {crypto.get_key_fingerprint()}")

    # 4. Configuration des modules LoRa
    # Utiliser les ports LoRa d√©tect√©s (CP2102N)
    lora_ports = []
    for port in ports:
        if isinstance(port, dict):
            # V√©rifier si c'est un port CP2102N (module LoRa)
            if 'CP2102N' in port.get('name', '') or 'usbserial' in port.get('port', ''):
                lora_ports.append(port['port'])

    if len(lora_ports) < 2:
        print(f"‚ö´Ô∏è Erreur: Au moins 2 modules LoRa requis, trouv√©s: {len(lora_ports)}")
        print("Ports LoRa d√©tect√©s:")
        for port in lora_ports:
            print(f"  - {port}")
        return False

    sender_port = lora_ports[0]
    receiver_port = lora_ports[1]

    print(f"\n‚ö™Ô∏è Configuration √©metteur sur {sender_port}")
    print(f"‚ö™Ô∏è Configuration r√©cepteur sur {receiver_port}")

    sender = LoRaDevice(sender_port)
    receiver = LoRaDevice(receiver_port)

    try:
        # Connexion des modules
        if not sender.connect(sender_port):
            print(f"‚ö´Ô∏è Impossible de connecter l'√©metteur sur {sender_port}")
            return False
        print("‚ö™Ô∏è √âmetteur connect√©")

        if not receiver.connect(receiver_port):
            print(f"‚ö´Ô∏è Impossible de connecter le r√©cepteur sur {receiver_port}")
            sender.disconnect()
            return False
        print("‚ö™Ô∏è R√©cepteur connect√©")

        # 5. Test de communication
        print("\nüì° Test de communication chiffr√©e...")

        # Messages de test
        test_messages = [
            "Hello LoRa World!",
            "Test de chiffrement AES-256",
            "Communication s√©curis√©e √©tablie ‚ö™Ô∏è",
            "Message avec √©mojis",
            "Test de message plus long pour v√©rifier la capacit√© de transmission des donn√©es chiffr√©es"
        ]

        received_messages = []

        def message_receiver():
            """Thread pour recevoir les messages"""
            for _ in range(len(test_messages)):
                try:
                    encrypted_data = receiver.receive_data(timeout=10)
                    if encrypted_data:
                        # D√©chiffrer le message
                        decrypted_message = crypto.decrypt_message(encrypted_data)
                        if decrypted_message:
                            received_messages.append(decrypted_message)
                            print(f"‚ö™Ô∏è Re√ßu {decrypted_message}")
                        else:
                            print("‚ö´Ô∏è √âchec du d√©chiffrement")
                    else:
                        print("‚ö™Ô∏è Timeout - Aucun message re√ßu")
                except Exception as e:
                    print(f"‚ö´Ô∏è Erreur de r√©ception: {e}")

        # D√©marrer le thread de r√©ception
        receiver_thread = threading.Thread(target=message_receiver)
        receiver_thread.start()

        # Attendre un peu avant d'envoyer
        time.sleep(2)

        # Envoyer les messages de test
        for i, message in enumerate(test_messages):
            print(f"üì§ Envoi {i+1}/{len(test_messages)}: {message}")

            # Chiffrer le message
            encrypted_data = crypto.encrypt_message(message)
            if encrypted_data:
                success = sender.send_data(encrypted_data)
                if success:
                    print(f"‚ö™Ô∏è Message {i+1} envoy√© avec succ√®s")
                else:
                    print(f"‚ö´Ô∏è √âchec envoi message {i+1}")
            else:
                print(f"‚ö´Ô∏è √âchec chiffrement message {i+1}")

            time.sleep(3)  # Attendre entre les envois

        # Attendre la fin de la r√©ception
        receiver_thread.join(timeout=30)

        # 6. V√©rification des r√©sultats
        print("\n R√©sultats du test")
        print(f"Messages envoy√©s {len(test_messages)}")
        print(f"Messages re√ßus {len(received_messages)}")

        success_rate = len(received_messages) / len(test_messages) * 100
        print(f"Taux de succ√®s {success_rate:.1f}%")

        if success_rate >= 80:
            print("‚ö™Ô∏è Test de communication r√©ussi")
            return True
        else:
            print("‚ö†Ô∏è Test de communication partiellment r√©ussi")
            return False

    except Exception as e:
        print(f"‚ö´Ô∏è Erreur durant le test {e}")
        return False

    finally:
        # Nettoyage
        print("\n‚ö™Ô∏è Nettoyage")
        sender.disconnect()
        receiver.disconnect()
        print("‚ö™Ô∏è Modules d√©connect√©s")

def main():
    """
    Fonction principale
    """
    print(f"D√©but du test: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    try:
        success = test_lora_communication()

        print("\n" + "=" * 50)
        if success:
            print("‚ö™Ô∏è TEST GLOBAL R√âUSSI")
            print("Le syst√®me de communication LoRa chiffr√©e fonctionne correctement.")
        else:
            print("‚ö´Ô∏è TEST GLOBAL √âCHOU√â")
            print("V√©rifiez les connexions et la configuration des modules LoRa.")

    except KeyboardInterrupt:
        print("\n‚èπ Test interrompu par l'utilisateur")
    except Exception as e:
        print(f"\nüí• Erreur critique {e}")

    print(f"\nFin du test {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    main()
